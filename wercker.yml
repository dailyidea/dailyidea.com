# This references the default nodejs container from
# the Docker Hub: https://registry.hub.docker.com/_/node/
# If you want Nodesource's container you would reference nodesource/node
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box:
  id: quay.io/shaperid/cypress-python
  tag: latest
  registry: quay.io

command-timeout: 600
no-response-timeout: 600

# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html

# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongo
    # http://devcenter.wercker.com/docs/services/mongodb.html
setup:
  steps:
#    - virtualenv:
#        cwd: back
#        virtualenv_location: $WERCKER_SOURCE_DIR/back/venv
    - script:
      cwd: front
      name: install dependencies front
      code: |
        yarn config set cache-folder $WERCKER_CACHE_DIR/yarn
        yarn
    - script:
      cwd: front
      name: build
      code: |
        yarn build-ci
        ls $WERCKER_CACHE_DIR
        du -sh $WERCKER_CACHE_DIR

tests:
  steps:
    - script:
      name: set yarn cache
      code: |
        ls $WERCKER_CACHE_DIR
        du -sh $WERCKER_CACHE_DIR
        export CYPRESS_CACHE_FOLDER=$WERCKER_CACHE_DIR/cypress
    - script:
      cwd: front
      name: lint
      code: yarn lint

deploy-init:
  steps:
    - script:
        name: init deploy
        code: echo "init of deploy"

deploy-appsync:
  steps:
    - script:
      name: install dependencies appsync
      cwd: back/appsync
      code: yarn
    - script:
      name: venv-appsync
      cwd: back
      code: |
        python -m venv appsync
        source appsync/bin/activate
    - pip-install:
        cwd: back/appsync
    - script:
      name: install dependencies appsync
      cwd: back/appsync
      code: yarn
    - script:
      name: deploy appsync
      cwd: back/appsync
      code: |
        yarn sls:deploy-ci

deploy-users:
  steps:
    - script:
      name: install dependencies users
      cwd: back/users
      code: yarn
    - script:
      name: deploy users
      cwd: back/users
      code: |
        yarn sls:deploy-ci


deploy-mail:
  steps:
    - script:
      name: install dependencies mail
      cwd: back/mail-processing
      code: yarn
    - script:
      name: venv-mail
      cwd: back
      code: |
        python -m venv mail
        source mail/bin/activate
    - pip-install:
        cwd: back/mail-processing
    - script:
      name: deploy mail-processing
      cwd: back/mail-processing
      code: |
        yarn sls:deploy-ci

deploy-front:
  steps:
    - script:
      name: deploy front
      cwd: front
      code: |
        yarn build-ci
        yarn sls:deploy-ci

after-deploy:
  after-steps:
    - slack-notifier:
        url: $SLACK_URL
        channel: dailyidea
        username: werckerbot
