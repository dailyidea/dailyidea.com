service: dailyidea-users-service

package:
  include:
    - ./../common/*.json

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${env:STAGE, 'dev'}
  region: ${env:AWS_REGION, 'us-east-1'}
  domainName: ${env:DOMAIN_NAME, 'beta.dailyidea.com'}
  emailStaticBucketName: dailyidea-serverless-email-static-${self:provider.stage}
  userUploadsStaticBucketName: dailyidea-appsync-user-uploads-static-${self:provider.stage}
  avatarsStaticBucketName: dailyidea-serverless-avatars-static-${self:provider.stage}
  avatarsStaticBucketURL: https://${self:provider.avatarsStaticBucketName}.s3.amazonaws.com
  environment:
    SENTRY_ENVIRONMENT: ${opt:stage, self:provider.stage}
    SENTRY_DSN: ${env:SENTRY_DSN}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ses:SendEmail
        - lambda:InvokeFunction
      Resource: "*"

custom:
  commentsTableName: dailyidea-comments-${self:provider.stage}
  ideaCommentsTemporaryTableName: dailyidea-comments-temporary-${self:provider.stage}
  followingTableName: dailyidea-following-${self:provider.stage}
  ideasTableName: dailyidea-ideas-${self:provider.stage}
  likesTableName: dailyidea-likes-${self:provider.stage}
  migrationsTableName: dailyidea-migrations-${self:provider.stage}
  savesTableName: dailyidea-saves-${self:provider.stage}
  statsActionsTableName: dailyidea-stats-actions-${self:provider.stage}
  tagsTableName: dailyidea-tags-${self:provider.stage}
  usersTableName: dailyidea-users-${self:provider.stage}
  secretToken: ${env:SECRET_TOKEN, 'secret-tk1x'}
  sentry:
    dsn: ${env:SENTRY_DSN}
  prune:
    automatic: true
    number: 10
  scripts:
    hooks:
      'deploy:finalize': sls invoke -f up

functions:
  up:
    handler: migrations.up
    timeout: 900
    package: {}
    role: FullDBAccessRole
    environment:
      MIGRATION_TABLE: ${self:custom.migrationsTableName}
      STAGE: ${self:provider.stage}
  down:
    handler: migrations.down
    timeout: 900
    package: {}
    role: FullDBAccessRole
    environment:
      MIGRATION_TABLE: ${self:custom.migrationsTableName}
      STAGE: ${self:provider.stage}
  requestLogin:
    handler: src/requestLogin.handler
    role: CustomUserOnboardingRole
    environment:
      DOMAIN_NAME: ${self:provider.domainName}
      BUCKET_URL_PREFIX: 'https://${self:provider.emailStaticBucketName}.s3.amazonaws.com'
      SES_REGION: ${self:provider.region}
      DYNAMO_REGION: ${self:provider.region}
      SOURCE_EMAIL: ${env:MAILBOX}
      SECRET_TOKEN: ${self:custom.secretToken}
      TABLE_NAME: ${self:custom.usersTableName}
      USERS_TABLE_NAME: ${self:custom.usersTableName}
      IDEAS_TABLE_NAME: ${self:custom.ideasTableName}
      IDEA_COMMENTS_TEMPORARY_TABLE_NAME: ${self:custom.ideaCommentsTemporaryTableName}
      AVATAR_STATIC_BUCKET_URL: ${self:provider.avatarsStaticBucketURL}
      AVATAR_STATIC_BUCKET_NAME: ${self:provider.avatarsStaticBucketName}
    events:
      - http:
          path: requestLogin
          method: post
          cors: true
  loginWithCode:
    handler: src/loginWithCode.handler
    role: CustomUserOnboardingRole
    environment:
      DOMAIN_NAME: ${self:provider.domainName}
      BUCKET_URL_PREFIX: 'https://${self:provider.emailStaticBucketName}.s3.amazonaws.com'
      SES_REGION: ${self:provider.region}
      DYNAMO_REGION: ${self:provider.region}
      SECRET_TOKEN: ${self:custom.secretToken}
      USERS_TABLE_NAME: ${self:custom.usersTableName}
    events:
      - http:
          path: loginWithCode
          method: post
          cors: true
  defineAuthChallenge:
    handler: src/defineAuthChallenge.handler
    events:
      - cognitoUserPool:
          pool: Daily
          trigger: DefineAuthChallenge
    environment:
      SES_REGION: ${self:provider.region}
  preSignUp:
    handler: src/preSignUp.handler
    role: CustomUserOnboardingRole
    events:
      - cognitoUserPool:
          pool: Daily
          trigger: PreSignUp
          existing: true
    environment:
      USER_POOL_ID:  ${env:COGNITO_POOL_ID}
  postAuthentication:
    handler: src/postAuthentication.handler
    role: CustomUserOnboardingRole
    events:
      - cognitoUserPool:
          pool: Daily
          trigger: PostAuthentication
          existing: true
    environment:
      USERS_TABLE_NAME: ${self:custom.usersTableName}
      SEND_DAILY_TO_USER_FUNCTION_NAME:
        'Fn::Join':
        - ':'
        - - 'arn:aws:lambda'
          - Ref: 'AWS::Region'
          - Ref: 'AWS::AccountId'
          - 'function:dailyidea-mail-processing-${self:provider.stage}-sendDailyToUser'

      REGION: ${self:provider.region}
  createAuthChallenge:
    handler: src/createAuthChallenge.handler
    events:
      - cognitoUserPool:
          pool: Daily
          trigger: CreateAuthChallenge
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ses:SendEmail
        Resource: "*"
  verifyAuthChallenge:
    handler: src/verifyAuthChallenge.handler
    events:
      - cognitoUserPool:
          pool: Daily
          trigger: VerifyAuthChallengeResponse
    environment:
      SECRET_TOKEN: ${self:custom.secretToken}
  customMessage:
    handler: src/customMessage.handler
    events:
      - cognitoUserPool:
          pool: Daily
          trigger: CustomMessage
    environment:
      DOMAIN_NAME: ${self:provider.domainName}
      BUCKET_URL_PREFIX: 'https://${self:provider.emailStaticBucketName}.s3.amazonaws.com'
  userToDynamoDB:
    handler: src/cognitoToDDB.handler
    role: CustomUserOnboardingRole
    events:
      - cognitoUserPool:
          pool: Daily
          trigger: PostConfirmation
    environment:
      TABLE_NAME: ${self:custom.usersTableName}
      REGION: ${self:provider.region}
      SET_USERS_SLUG_FUNCTION_NAME:
        'Fn::Join':
          - ':'
          - - 'arn:aws:lambda'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - 'function:dailyidea-appsync-backend-${self:provider.stage}-setUsersSlug'


plugins:
  - serverless-localstack
  - serverless-offline
  - serverless-prune-plugin
  - "@clarityhub/serverless-dynamodb-migrations"
  - serverless-plugin-scripts

resources:
  - ${file(resources/dynamo-user-table.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  - ${file(resources/full-db-access-role.yml)}
